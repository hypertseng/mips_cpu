`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2023/01/02 16:07:49
// Design Name: 
// Module Name: branch_predict_global
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module branch_predict_global (
    input wire clk, rst,
    
    input wire flushD,
    input wire stallD,

    input wire [31:0] pcF, pcM,

    input wire branchD,
    input wire branchM,         // Mï¿½×¶ï¿½ï¿½Ç·ï¿½ï¿½Ç·ï¿½Ö§Ö¸ï¿½ï¿½
    input wire actual_takeM,    // Êµï¿½ï¿½ï¿½Ç·ï¿½ï¿½ï¿½×ª
    input wire actual_takeE,
    input wire pred_wrong, // Ô¤ï¿½ï¿½ï¿½ï¿½ï¿½Ç·ï¿½ï¿½ï¿½È·ï¿½ï¿½memoryï¿½×¶ï¿½ï¿½ï¿½Òª
    output wire pred_takeD,      // Ô¤ï¿½ï¿½ï¿½Ç·ï¿½ï¿½ï¿½×ª
    output wire pred_takeF
);

    // wire pred_takeF;   //Ô¤ï¿½ï¿½
    reg pred_takeF_r; //ï¿½Ñ½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?

// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
    parameter Strongly_not_taken = 2'b00, Weakly_not_taken = 2'b01, Weakly_taken = 2'b11, Strongly_taken = 2'b10;
    parameter GHR_LENGTH = 8;

    reg [GHR_LENGTH-1:0] GHR_value;
    reg [GHR_LENGTH-1:0] GHR_value_old;

    reg [GHR_LENGTH-1:0] GHR_value_old_D;
    reg [GHR_LENGTH-1:0] GHR_value_old_E;
    reg [GHR_LENGTH-1:0] GHR_value_old_M;

    reg [1:0] PHT [(1<<GHR_LENGTH)-1:0];
    integer i,j;

    wire [(GHR_LENGTH-1):0] PHT_index;

// ---------------------------------------Ô¤ï¿½ï¿½ï¿½ß¼ï¿½ï¿½ï¿½Fetchï¿½×¶ï¿½---------------------------------------

    assign PHT_index = pcF[9:2] ^ GHR_value; // Ê¹ï¿½ï¿½XORï¿½ï¿½ï¿½ï¿½ï¿½Í?


    assign pred_takeF = PHT[PHT_index][1];      // ï¿½ï¿½È¡Ö¸ï¿½×¶ï¿½Ô¤ï¿½ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ë®ï¿½ß´ï¿½ï¿½Ý¸ï¿½ï¿½ï¿½ï¿½ï¿½×¶Î¡ï¿½

        // --------------------------pipeline------------------------------
            always @(posedge clk) begin
                if(rst | flushD) begin
                    pred_takeF_r <= 0;
                end
                else if(~stallD) begin
                    pred_takeF_r <= pred_takeF;
                end
            end
        // --------------------------pipeline------------------------------

// ---------------------------------------Ô¤ï¿½ï¿½ï¿½ß¼ï¿½ï¿½ï¿½ï¿½ï¿½---------------------------------------

// ---------------------------------------BHTï¿½ï¿½Ê¼ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½Â£ï¿½Memoryï¿½×¶ï¿½---------------------------------------
    wire [(GHR_LENGTH-1):0] update_PHT_index;


    always@(posedge clk) begin
        if(rst) begin
            GHR_value <= 0; 
            GHR_value_old <= 0; // Îªï¿½ï¿½ï¿½ï¿½fetchï¿½×¶ÎµÃµï¿½ghrï¿½ï¿½Öµ
        end
        else if(!stallD & branchD) begin // ï¿½ï¿½ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½branchï¿½ï¿½Ã»ï¿½Ð±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¿ï¿½ï¿½Ô¸ï¿½ï¿½ï¿½ghrÖµï¿½ï¿½ï¿½ï¿½decodeï¿½×¶ï¿½
            GHR_value_old <= GHR_value;
            GHR_value <= {GHR_value << 1, pred_takeD};
            
        end else if(pred_wrong && branchM) begin // ï¿½Ãµï¿½Ô¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô¤ï¿½ï¿½ï¿½Ç´ï¿½ï¿½ï¿?(memory ï¿½×¶ï¿½)
            GHR_value <= {GHR_value_old <<1, actual_takeM};
            GHR_value_old <= GHR_value;
        end
    end

    always @(posedge clk) begin
        if (rst) begin
            GHR_value_old_D <= 0;
            GHR_value_old_E <= 0;
            GHR_value_old_M <= 0;
        end
        else begin
            GHR_value_old_D <= GHR_value_old;
            GHR_value_old_E <= GHR_value_old_D;
            GHR_value_old_M <= GHR_value_old_E;
        end
    end

// ---------------------------------------BHTï¿½ï¿½Ê¼ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½Â½ï¿½ï¿½ï¿½

    assign update_PHT_index = GHR_value_old_M ^ pcM[9:2];
// ---------------------------------------PHTï¿½ï¿½Ê¼ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½ï¿½---------------------------------------
    always @(posedge clk) begin
        if(rst) begin
             for(i = 0; i < (1<<GHR_LENGTH); i=i+1) begin
                 PHT[i] <= Weakly_taken;
             end
//            PHT[(1<<GHR_LENGTH)-1:0] <= '{default: 2'b11};
        end
        else if(branchM) begin
            case(PHT[update_PHT_index])
                // ï¿½Ë´ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¸ï¿½ï¿½ï¿½ï¿½ß¼ï¿½ï¿½Ä´ï¿½ï¿½ï¿?
                Strongly_not_taken: begin
                    if(actual_takeM) begin
                        PHT[update_PHT_index] <= Weakly_not_taken;
                    end

                    else begin
                        PHT[update_PHT_index] <= PHT[update_PHT_index];
                    end
                end

                Weakly_not_taken: begin
                    if(actual_takeM) begin
                        PHT[update_PHT_index] <= Weakly_taken;
                    end

                    else begin
                        PHT[update_PHT_index] <= Strongly_not_taken;
                    end
                end

                Weakly_taken: begin
                    if(actual_takeM) begin
                        PHT[update_PHT_index] <= Strongly_taken;
                    end

                    else begin
                        PHT[update_PHT_index] <= Weakly_not_taken;
                    end
                end

                Strongly_taken: begin
                    if(actual_takeM) begin
                        PHT[update_PHT_index] <= PHT[update_PHT_index];
                    end

                    else begin
                        PHT[update_PHT_index] <= Weakly_taken;
                    end
                end

            endcase 
        end
    end
// ---------------------------------------PHTï¿½ï¿½Ê¼ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½Â½ï¿½ï¿½ï¿½---------------------------------------

    // ï¿½ï¿½ï¿½ï¿½×¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Õµï¿½Ô¤ï¿½ï¿½ï¿½ï¿½
    assign pred_takeD = branchD & pred_takeF_r;  
endmodule